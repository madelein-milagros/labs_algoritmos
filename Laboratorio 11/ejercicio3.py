class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val                # Valor del nodo
        self.left = left              # Referencia al hijo izquierdo
        self.right = right            # Referencia al hijo derecho

# . Funci√≥n para validar si el √°rbol es un BST
def is_valid_bst(root):
    # Funci√≥n auxiliar que recorre el √°rbol recursivamente
    def helper(node, min_val, max_val):
        if not node:
            return True  # Un nodo nulo (√°rbol vac√≠o) siempre es v√°lido

        # Verificamos si el valor actual del nodo est√° fuera de los l√≠mites v√°lidos
        if not (min_val < node.val < max_val):
            return False  # Si se viola la propiedad de BST, retornamos False

        # Repetimos la validaci√≥n para el sub√°rbol izquierdo y derecho
        # El valor actual del nodo se vuelve el nuevo l√≠mite superior/inferior
        return (helper(node.left, min_val, node.val) and
                helper(node.right, node.val, max_val))

    # Llamada inicial con los l√≠mites m√°ximos posibles
    return helper(root, float('-inf'), float('inf'))

#  Construye un √°rbol binario a partir de una lista (orden por niveles)
def build_tree(values):
    if not values:
        return None  # Si la lista est√° vac√≠a, retornamos None

    # Creamos nodos para cada valor (None queda como nodo vac√≠o)
    nodes = [TreeNode(val) if val is not None else None for val in values]
    
    kids = nodes[::-1]    # Invertimos la lista para extraer nodos como si fuera una pila
    root = kids.pop()     # El primer nodo es la ra√≠z del √°rbol

    # Asignamos hijos izquierdos y derechos a cada nodo
    for node in nodes:
        if node:
            if kids: 
                node.left = kids.pop()   # Asignar hijo izquierdo
            if kids: 
                node.right = kids.pop()  # Asignar hijo derecho
    return root

#  √Årbol inv√°lido: el hijo izquierdo es mayor que la ra√≠z (violaci√≥n de BST)
def build_invalid_tree1():
    root = TreeNode(5)         # Nodo ra√≠z con valor 5
    root.left = TreeNode(6)    # Error: 6 > 5 (izquierdo inv√°lido)
    root.right = TreeNode(7)   # V√°lido
    return root

#   √Årbol inv√°lido: el hijo derecho es menor que la ra√≠z (violaci√≥n de BST)
def build_invalid_tree2():
    root = TreeNode(5)         # Nodo ra√≠z con valor 5
    root.left = TreeNode(3)    # V√°lido
    root.right = TreeNode(4)   # Error: 4 < 5 (derecho inv√°lido)
    return root

#  Casos de prueba con impresi√≥n de resultados esperados
# √Årbol:       5
#             / \
#            3   7
#           / \ / \
#          2  4 6  8   ‚Üí Cumple con todas las reglas de BST
print(is_valid_bst(build_tree([5, 3, 7, 2, 4, 6, 8])) == True)   # ‚úÖ BST v√°lido

# √Årbol con violaci√≥n en el lado izquierdo (6 > 5)
print(is_valid_bst(build_invalid_tree1()) == False)             # ‚ùå BST inv√°lido

# √Årbol con violaci√≥n en el lado derecho (4 < 5)
print(is_valid_bst(build_invalid_tree2()) == False)             # ‚ùå BST inv√°lido

# √Årbol con un solo nodo: siempre es un BST v√°lido
print(is_valid_bst(build_tree([42])) == True)                   # üå± √Årbol v√°lido

# √Årbol vac√≠o: se considera v√°lido
print(is_valid_bst(None) == True)                               # üì≠ √Årbol vac√≠o v√°lido
