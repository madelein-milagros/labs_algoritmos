class Queue:
    """Simple queue implementation using a Python list."""
    
    def __init__(self):
        """Initialize an empty queue."""
        self.items = []
    
    def is_empty(self):
        """Check if the queue is empty."""
        return len(self.items) == 0
    
    def enqueue(self, item):
        """Add an item to the rear of the queue."""
        self.items.append(item)
    
    def dequeue(self):
        """Remove and return the front item from the queue."""
        if self.is_empty():
            raise IndexError("Queue is empty")
        return self.items.pop(0)
    
    def peek(self):
        """Return the front item without removing it."""
        if self.is_empty():
            raise IndexError("Queue is empty")
        return self.items[0]
    
    def size(self):
        """Return the number of items in the queue."""
        return len(self.items)
    
    def __str__(self):
        """Return a string representation of the queue."""
        return f"Queue: {self.items}"


def test_simple_queue():
    """Test basic queue operations with simple implementation."""
    print("Testing simple queue implementation:")
    queue = Queue()
    
    print(f"Empty queue: {queue}")
    print(f"Is empty? {queue.is_empty()}")
    
    # Enqueue operations
    for i in range(1, 4):
        queue.enqueue(i * 10)
        print(f"After enqueue({i*10}): {queue}")
    
    # Test peek
    print(f"Peek: {queue.peek()}")
    
    # Test dequeue
    print(f"Dequeue: {queue.dequeue()}")
    print(f"After dequeue: {queue}")
    
    # Enqueue more items
    queue.enqueue(40)
    print(f"After enqueue(40): {queue}")
    
    # Empty the queue
    while not queue.is_empty():
        print(f"Dequeue: {queue.dequeue()}")
    
    print(f"Final queue: {queue}")
    
    # Test exception handling
    try:
        queue.dequeue()
    except IndexError as e:
        print(f"Error as expected: {e}")


# Example usage
if __name__ == "__main__":
    test_simple_queue()
